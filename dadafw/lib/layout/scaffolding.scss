// Dada Web Framework <https://github.com/msikma/dadafw>
// Copyright (C) 2013-2015, Michiel Sikma <michiel@sikma.org> and contributors
// MIT licensed

/**
 * Grid System / Scaffolding
 *
 * These are the basic scaffolding settings needed for the grid system
 * to work.
 */

// Implement the border-box format site-wide.
*,
*:before,
*:after {
  @include box-sizing(border-box);
}

// All columns are done using percentages.
// Since 0.33333% * 3 = 0.99999%, this causes small gaps to appear when the
// grid container is centered and the width of the viewport is an odd number.
// We can fix this in modern Chrome and Firefox by setting the element
// in which the container resides to a width of 99.9999%. The safest
// element to use for this is the <html> element itself.

html {
  width: 99.9999%;
}

// We first define the SCSS code for the mobile version. Once a
// grid has been defined, the mobile settings will be overridden.

body {
  // On mobile sizes, the body has a gutter on the both sides.
  padding-left: $col-gutter-xs / 2;
  padding-right: $col-gutter-xs / 2;
}

// Basic grid layout

.grid {
  margin: auto;
  
  // Makes it possible to stretch out a grid to the full container size.
  &.full-width {
    width: 100%;
  }
}
.row {
  @include flexbox();
  @include flex-flow(row wrap);
  margin: 0;

  // Cross-platform classes for setting the row justify-content value.
  &.justify-start {
    @include justify-content(flex-start);
  }
  &.justify-end {
    @include justify-content(flex-end);
  }
  &.justify-center {
    @include justify-content(center);
  }
  &.justify-between, &.justify-equal {
    @include justify-content(space-between);
  }
  &.justify-around {
    @include justify-content(space-around);
  }
  &.justify-equal {
    @include clearfix();
  }
}
.col {
  @include flex(0 0 auto);
  @include flex-basis(100%);
  width: 100%;
  margin-left: 0;
  display: block;
  position: relative;
  // Permit overflow of contents.
  min-width: 0;
  // Prevent collapse when it's empty.
  min-height: 1px;

  // Cross-platform classes for setting the self alignment.
  &.align-start {
    @include align-self(flex-start);
  }

  &.align-center {
    @include align-self(center);
  }

  &.align-baseline {
    @include align-self(baseline);
  }

  &.align-end {
    @include align-self(flex-end);
  }

  &.align-auto {
    @include align-self(auto);
  }

  &.align-stretch {
    @include align-self(stretch);
  }
}

// Things that are to be hidden on mobile are set to display: none; by default.
// This is overridden within the minimum viewport size of the grid.
.xs-hidden {
  display: none;
}
