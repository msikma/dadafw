// Dada Web Framework <https://github.com/msikma/dadafw>
// Copyright (C) 2013-2015, Michiel Sikma <michiel@sikma.org> and contributors
// MIT licensed

/**
 * Grid System / Functions
 *
 * The functions that construct the grid.
 */

/**
 * Goes through the grid data and calculates some values that we'll use
 * to set up the grid system.
 *
 * We've got specific styles that apply only to mobile, and styles
 * that apply only to desktop.
 *
 * In order to apply these correctly, we need to know where the mobile
 * size stops and the desktop size begins. We'll loop through the grid map
 * until we find the largest (last) mobile size.
 */
@function process-grid($grid) {
  $new-grid: map-merge($grid, ());

  // Keep track of whether we've passed mobile sizes.
  $post-mobile: false;
  // The threshold of where desktop sizes begin.
  $mobile-desktop-threshold: 0;

  // We'll save the data that corresponds to the first responsive size
  // in order to construct the main parts of the grid.
  $generic-stage-data: null;
  $generic-col-amount: 12;
  $generic-col-gutter: 0;

  // Now iterate through the responsive stages and extract the necessary
  // information from them, and save the threshold of where the
  // stage should end.
  $i: length($grid) - 1;
  $viewport-limit: 0;
  @while $i >= 0 {
    $stage: nth(map-keys($grid), $i + 1);
    $stage-data: map-get($grid, $stage);
    $viewport-width: map-get($stage-data, 'viewport-width');
    $is-mobile: map-get($stage-data, 'is-mobile');

    // When this loop ends, $mobile-desktop-threshold will contain
    // the viewport width of the largest mobile responsive size.
    @if $is-mobile == true {
      $mobile-desktop-threshold: $viewport-width;
      $post-mobile: true;
    }

    // Save the data of the smallest desktop size.
    @if $is-mobile == false {
      $generic-stage-data: $stage-data;
      $generic-col-amount: map-get($generic-stage-data, 'col-amount');
      $generic-col-gutter: map-get($generic-stage-data, 'col-gutter');
    }

    // Save the viewport limit, unless it's the first iteration.
    @if $viewport-limit > 0 {
      $stage-data: map-merge($stage-data, (
        'viewport-limit': $viewport-limit - 1
      ));
    }

    $new-grid: map-merge($new-grid, ($stage: $stage-data));

    // Save the current viewport limit so we can use it for the next iteration.
    $viewport-limit: $viewport-width;

    $i: $i - 1;
  }

  @return (
    'generic-col-amount': $generic-col-amount,
    'generic-col-gutter': $generic-col-gutter,
    'mobile-desktop-threshold': $mobile-desktop-threshold,
    'grid': $new-grid
  );
}

// Sets the full grid width.
@mixin grid-layout($stage, $viewport-width, $viewport-limit, $grid-width,
  $col-gutter)
{
  $col-half-gutter: $col-gutter / 2;

  $width-query: get-width-query($viewport-width, $viewport-limit);

  @media screen and #{$width-query} {
    .grid {
      width: $grid-width;
      padding-left: $col-half-gutter;
      padding-right: $col-half-gutter;
    }
    .row {
      margin-left: -$col-half-gutter;
      margin-right: -$col-half-gutter;
    }
  }
}

// Calculate the sizes of the grid columns.
@mixin grid-cols-render($col-amount, $stage) {
  $i: $col-amount;
  @while $i > 0 {
    $size: percentage($i / $col-amount);

    // Generate columns for the generic desktop grid.
    @if $stage == 'generic' {
      .w-#{$i} {
        @include flex-basis($size);
      }
      .offset-#{$i} {
        margin-left: $size;
      }
    }
    // If a responsive stage is specified, generate the override classes
    // specific to that stage.
    @else {
      .col.w-#{$stage}-#{$i} {
        @include flex-basis($size);
      }
      .col.offset-#{$stage}-#{$i} {
        margin-left: $size;
      }
    }

    $i: $i - 1;
  }
}

// Aside from the regular block grid, we also provide text column classes.
// These have the same sizes as regular columns, but they work through
// the use of column-span. They can be used to neatly make text from
// a single container span across multiple columns.
@mixin grid-text-cols-render($col-amount, $col-gutter, $stage) {
  $i: $col-amount;
  @while $i > 0 {
    @if $stage == 'generic' {
      .colspan-#{$i} {
        @include column-count($i);
      }
    }
    @else {
      .col.colspan-#{$stage}-#{$i} {
        @include column-count($i);
      }
    }
    $i: $i - 1;
  }
  // Set the gap between the columns. Only needs to be done once,
  // so we'll do it during the generic step.
  @if $stage == 'generic' {
    .col {
      @include column-gap($col-gutter);
    }
  }
}

@mixin grid-semantic-cols-render($semantic-cols, $col-amount) {
  @if nth($semantic-cols, 1) != null {
    $i: length($semantic-cols);
    @while $i > 0 {
      $col: nth(map-keys($semantic-cols), $i);
      $col-data: map-get($semantic-cols, $col);

      // Set the semantic column's width, and optionally the
      // column-count value.
      .#{$col} {
        @if map-has-key($col-data, 'w') {
          width: percentage(map-get($col-data, 'w') / $col-amount);
        }
        @if map-has-key($col-data, 'colspan') {
          @include column-count(map-get($col-data, 'colspan'));
        }
      }

      $i: $i - 1;
    }
  }
}

// Mixin that creates a grid for a single responsive size.
@mixin grid-cols($stage, $viewport-width, $viewport-limit, $col-gutter,
  $col-amount, $semantic-cols)
{
  $col-half-gutter: $col-gutter / 2;

  $width-query: get-width-query($viewport-width, $viewport-limit);

  @media screen and #{$width-query} {
    // Basic column size:
    .col {
      padding-left: $col-half-gutter;
      padding-right: $col-half-gutter;
    }
    // An element can be hidden when a specific responsive size is active.
    // Hide the ones that pertain to this size.
    .xs-hidden {
      // The xs-hidden elements are always shown in a grid.
      display: block;
    }
    // (FIXME, only works for default grid)
    @if ($stage == l or $stage == m) {
      .col.s-hidden {
        display: none;
      }
    }
    @if ($stage == l) {
      .col.m-hidden {
        display: none;
      }
    }
    .col.#{$stage}-hidden {
      display: none;
    }

    // Calculate the sizes of the grid columns.
    @include grid-cols-render($col-amount, $stage);

    // Implement the text column classes.
    @include grid-text-cols-render($col-amount, $col-gutter, $stage);

    // Set up semantic columns in case they exist.
    @include grid-semantic-cols-render($semantic-cols, $col-amount);
  }
}

// Generate relative width columns.
@mixin grid-rel-cols-render($stage, $viewport-width, $viewport-limit,
  $col-amount) {
  $width-query: get-width-query($viewport-width, $viewport-limit);

  @media screen and #{$width-query} {
    // Calculate the sizes of the grid columns.
    $i: $col-amount;
    @while $i > 0 {
      $size: percentage(1 / $i);
      @if $stage == 'generic' {
        .relw-#{$i} {
          @include flex-basis($size);
        }
      }
      @else {
        .col.relw-#{$stage}-#{$i} {
          @include flex-basis($size);
        }
      }
      $i: $i - 1;
    }
  }
}

// Adds some scaffolding styles for viewports wider than mobile.
@mixin grid-desktop($viewport-width) {
  @media screen and (min-width: $viewport-width) {
    // Remove the extra side padding for mobile.
    body {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

@mixin construct-grid($grid) {
  // Retrieve some additional information from our grid.
  $grid-data: process-grid($grid);

  $grid: map-get($grid-data, 'grid');
  $generic-stage-data: map-get($grid-data, 'generic-stage-data');
  $generic-col-amount: map-get($grid-data, 'generic-col-amount');
  $generic-col-gutter: map-get($grid-data, 'generic-col-gutter');
  $mobile-desktop-threshold: map-get($grid-data, 'mobile-desktop-threshold');

  // Implement grid debugging.
  @if $grid-debug-include == true {
    // Include the basic grid debugging classes common to all sizes.
    @include grid-debug();

    // Now we'll implement grid debugging classes that are specific to either
    // mobile or desktop sizes.
    @include grid-debug-mobile($mobile-desktop-threshold - 1);
    @include grid-debug-desktop($mobile-desktop-threshold);
  }

  // Implement desktop scaffolding.
  @include grid-desktop($mobile-desktop-threshold);

  @media screen and (min-width: $mobile-desktop-threshold) {
    // Calculate the basic grid layout for any desktop size.
    @include grid-cols-render($generic-col-amount, 'generic');

    // Calculate the generic colspan classes for any desktop size.
    @include grid-text-cols-render($generic-col-amount, $generic-col-gutter,
      'generic');
  }

  // Calculate the grid layout for each responsive stage.
  $i: 0;
  $prev-gutter: 0;
  @while $i < length($grid) {
    $stage: nth(map-keys($grid), $i + 1);
    $stage-data: map-get($grid, $stage);
    
    // Retrieve the stage's info and pass it along to the layout function.
    $viewport-width: map-get($stage-data, 'viewport-width');
    $viewport-limit: map-get($stage-data, 'viewport-limit');
    $grid-width: map-get($stage-data, 'grid-width');
    $col-amount: map-get($stage-data, 'col-amount');
    $col-gutter: map-get($stage-data, 'col-gutter');
    $semantic-cols: map-get($stage-data, 'semantic-cols');
    
    // Set up the basic grid settings and the size at which it activates.
    @include grid-layout($stage, $viewport-width, $viewport-limit, $grid-width, $col-gutter);
    
    // Calculate the sizes and margins for the grid's columns.
    @include grid-cols($stage, $viewport-width, $viewport-limit, $col-gutter, $col-amount,
      $semantic-cols);

    // Add stage-specific grid debugging rules, if needed.
    @if $grid-debug-include == true and $col-gutter != $prev-gutter {
      @include grid-debug-stage($viewport-width, $col-gutter);
      $prev-gutter: $col-gutter;
    }

    $i: $i + 1;
  }

  // Generate the relative width columns.
  // These are columns that take up a size of (width / n), i.e.
  // you will be able to fit exactly n columns (n being 1-12) in a grid.

  // Generate the general classes first.
  @include grid-rel-cols-render('generic', $mobile-desktop-threshold, null,
    $generic-col-amount);

  // Now generate the relative column classes.
  $i: 0;
  @while $i < length($grid) {
    $stage: nth(map-keys($grid), $i + 1);
    $stage-data: map-get($grid, $stage);
    $viewport-width: map-get($stage-data, 'viewport-width');
    $viewport-limit: map-get($stage-data, 'viewport-limit');
    $col-amount: map-get($stage-data, 'col-amount');
    @include grid-rel-cols-render($stage, $viewport-width, $viewport-limit,
      $col-amount);
    $i: $i + 1;
  }
}
