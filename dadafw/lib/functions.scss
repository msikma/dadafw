// Dada Web Framework <https://github.com/msikma/dadafw>
// Copyright (C) 2013-2015, Michiel Sikma <michiel@sikma.org> and contributors
// MIT licensed

/**
 * Internal Functions
 *
 * Note that functions that are specific only to particular files
 * will not be included here. For example, functions used by the
 * grid system exclusively will be in 'layout/functions.scss'.
 */

/**
 * Returns the first item of a list.
 * @param {list} - list object
 * @returns {*} - first item of a list
 */
@function first($list) {
  @return nth($list, 1);
}

/**
 * Returns the last item of a list.
 * @param {list} - list object
 * @returns {*} - last item of the list
 */
@function last($list) {
  @return nth($list, length($list));
}

/**
 * Returns a width query containing at least (min-width: n),
 * and additionally (max-width: n) if a max width is passed.
 *
 * The query also contains the 'screen' media type.
 *
 * @param {value} - minimal width
 * @param {value} - maximal width
 * @returns {string} - media query string
 */
@function get-width-query($min:null, $max:null) {
  $media: 'screen';
  $width-query: '';

  @if $min {
    $width-query: '(min-width: ' + $min + ')';
  }
  @if $max {
    $width-query: if($width-query != '', $width-query + ' and ', '') +
      '(max-width: ' + $max + ')';
  }
  $width-query: $media + ' and ' + $width-query;
  @return $width-query;
}

/**
 * Returns a string containing a responsive media query.
 *
 * The returned query string is built according to the user's grid.
 * E.g. for the default grid, using get-responsive('m', 'l')
 * would return 'screen and (min-width: <m>) and (max-width: <l>)',
 * where <m> and <l> are the responsive sizes for medium and large.
 *
 * If only one argument is passed, that value is used as the min-width.
 * If two arguments are passed, they are used as min-width and max-width,
 * respectively.
 *
 * Example usage:
 *
 *   @media #{media-query(m)} {
 *     // styles for size 'm' only.
 *   }
 *
 *   @media #{media-query(m above)} {
 *     // styles for size 'm' and above.
 *   }
 *
 *   @media #{media-query(m below)} {
 *     // styles for size 'm' and below ('s' and mobile).
 *   }
 *
 *   @media #{media-query(m l)} {
 *     // styles for anything inside of 'm' and 'l'.
 *   }
 */
@function media-query($args) {
  $query: '';
  $media: 'screen';

  // Take the part of the $grid-data map that contains the keys (size names)
  // and responsive size values.
  $data: map-get($grid-data, 'grid');

  // Whether this is a relative selection (e.g. m and above).
  $is-rel: false;
  $rel-type: null;

  // List of the sizes that we're targeting.
  $sizes: ();

  @each $arg in $args {
    // If this is a responsive size:
    @if map-has-key($data, $arg) {
      // If we're doing a relative selection (e.g. m and above), then we
      // cannot have more than one included responsive size. Check to ensure.
      @if $is-rel and length(map-keys($sizes)) > 0 {
        @warn 'ddfw: Cannot have more than 1 size in relative query.';
      }
      $is-rel: false;

      // Add the data for this size into the list of sizes we want to target.
      $sizes: append($sizes, map-get($data, $arg));
    }
    @if $arg == 'and' {
      // Nothing.
    }
    @if $arg == 'above' or $arg == 'below' {
      // Sanity check: if we have multiple sizes, then we cannot accept
      // relative statements anymore.
      @if length($sizes) > 1 {
        @warn 'ddfw: Cannot have relative statement and multiple sizes.';
      }
      // Sanity check: we can only have one single relative argument.
      @if $rel-type {
        @warn 'ddfw: Cannot have multiple types of relative statements.';
      }
      $is-rel: true;
      $rel-type: $arg;
    }
  }

  // Now that we've processed the arguments, let's generate either
  // a relative query (e.g. and above) or a query with multiple sizes.
  @if $is-rel {
    $size: nth($sizes, 1);
    $min-width: map-get($size, 'viewport-width');
    $max-width: map-get($size, 'viewport-limit');
    @if $rel-type == 'above' {
      $query: '(min-width: ' + $min-width + ')';
    }
    @if $rel-type == 'below' and $max-width {
      $query: '(max-width: ' + $max-width + ')';
    }
  }
  @else {
    @each $size in $sizes {
      $min-width: map-get($size, 'viewport-width');
      $max-width: map-get($size, 'viewport-limit');
      $size-query: '(min-width: ' + $min-width + ')';
      @if $max-width {
        $size-query: $size-query + ' and (max-width: ' + $max-width + ')';
      }
      $size-query: $media + ' and ' + $size-query;
      $query: if($query != '', $query + ', ', '') + $size-query;
    }
  }

  @return $query;
}
