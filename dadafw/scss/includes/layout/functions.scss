// Dada Web Framework <https://github.com/msikma/dadafw>
// Copyright (C) 2013-2015, Michiel Sikma <michiel@sikma.org> and contributors
// MIT licensed

/**
 * Grid System / Functions
 *
 * The functions that construct the grid.
 */

@mixin construct-grid($grid) {
  // Retrieve the smallest responsive stage of the grid.
  $smallest-stage: nth(map-keys($grid), 1);
  $smallest-stage-data: map-get($grid, $smallest-stage);
  $grid-min-width: map-get($smallest-stage-data, 'viewport-width');
  
  // Remove the extra padding once we're above the smallest size.
  body {
    @media screen and (min-width: $grid-min-width) {
      padding-left: 0;
      padding-right: 0;
    }
  }
  
  // Calculate the grid layout for each responsive stage.
  $i: 0;
  @while $i < length($grid) {
    $stage: nth(map-keys($grid), $i + 1);
    $stage-data: map-get($grid, $stage);
    
    // Retrieve the stage's info and pass it along to the layout function.
    $viewport-width: map-get($stage-data, 'viewport-width');
    $grid-width: map-get($stage-data, 'grid-width');
    $col-amount: map-get($stage-data, 'col-amount');
    $col-gutter: map-get($stage-data, 'col-gutter');
    $semantic-cols: map-get($stage-data, 'semantic-cols');
    
    // Set up the basic grid settings and the size at which it activates.
    @include grid-layout($stage, $viewport-width, $grid-width, $col-gutter);
    
    // Calculate the sizes and margins for the grid's columns.
    @include grid-cols($stage, $viewport-width, $col-gutter, $col-amount, $semantic-cols);
    
    // Include the grid debugging class if debugging is active.
    @if $grid-debug-include == true {
      @include grid-debug($stage, $viewport-width, $col-gutter, $col-amount);
    }
    
    $i: $i + 1;
  }
}

// Sets the full grid width.
@mixin grid-layout($stage, $viewport-width, $grid-width, $col-gutter)
{
  $col-half-gutter: $col-gutter / 2;
  
  @media screen and (min-width: $viewport-width) {
    .grid {
      width: $grid-width;
      padding-left: $col-half-gutter;
      padding-right: $col-half-gutter;
    }
    .row {
      margin-left: -$col-half-gutter;
      margin-right: -$col-half-gutter;
    }
  }
}

// Mixin that creates a grid for a single responsive size.
@mixin grid-cols($stage, $viewport-width, $col-gutter, $col-amount, $semantic-cols)
{
  $col-half-gutter: $col-gutter / 2;
  
  @media screen and (min-width: $viewport-width) {
    // Basic column size:
    .col {
      padding-left: $col-half-gutter;
      padding-right: $col-half-gutter;
      width: 100%;
      float: left;
    }
    // An element can be hidden when a specific responsive size is active.
    // Hide the ones that pertain to this size.
    .xs-hidden {
      // The xs-hidden elements are always shown in a grid.
      display: block;
    }
    // (FIXME, only works for default grid)
    @if ($stage == l or $stage == m) {
      .col.s-hidden {
        display: none;
      }
    }
    @if ($stage == l) {
      .col.m-hidden {
        display: none;
      }
    }
    .col.#{$stage}-hidden {
      display: none;
    }
    
    // Calculate the sizes of the grid columns.
    $i: $col-amount;
    @while $i > 0 {
      .w-#{$i}, .col.w-#{$stage}-#{$i} {
        width: percentage($i / $col-amount);
      }
      .col.offset-#{$i} {
        margin-left: percentage($i / $col-amount);
      }
      $i: $i - 1;
    }
    
    // Aside from the regular block grid, we also provide text column classes.
    // These have the same sizes as regular columns, but they work through
    // the use of column-span. They can be used to neatly make text from
    // a single container span across multiple columns.
    $i: $col-amount;
    @while $i > 0 {
      .colspan-#{$i} {
        @include column-count($i);
      }
      $i: $i - 1;
    }
    // Set the gap between the columns.
    .col {
      @include column-gap($col-gutter);
    }
    
    // Set up semantic columns in case they exist.
    @if nth($semantic-cols, 1) != null {
      $i: length($semantic-cols);
      @while $i > 0 {
        $col: nth(map-keys($semantic-cols), $i);
        $col-data: map-get($semantic-cols, $col);
        
        // Set the semantic column's width, and optionally the
        // column-count value.
        .#{$col} {
          @if map-has-key($col-data, 'w') {
            width: percentage(map-get($col-data, 'w') / $col-amount);
          }
          @if map-has-key($col-data, 'colspan') {
            @include column-count(map-get($col-data, 'colspan'));
          }
        }
        
        $i: $i - 1;
      }
    }
  }
}

// Grid Debugging
// ---------------------------------------------------------------------
// This is a grid display class for debugging and documentation purposes.
// It's a bit tedious and requires some trickery because a background
// will show up in the gutter as well. So we need to use box-shadows
// to make the gutter visible. We use the same method to display the edges.
// This is only for debugging purposes.

@mixin grid-debug($stage, $viewport-width, $col-gutter, $col-amount)
{
  @media screen and (min-width: $viewport-width) {
    .grid-debug {
      .row {
        background: rgba($grid-debug-color, 0.35);
  
        // Top and left borders and the padding fills (base)
        $col-base-shadows: (
          inset (-$col-gutter / 2) 0 0 rgba($grid-debug-color, 0.45),
          inset ($col-gutter / 2) 0 0 rgba($grid-debug-color, 0.45),
          inset 1px 1px 0 rgba($grid-debug-color, 1.0)
        );
      
        &:last-child {
          // Bottom border
          @include box-shadow(
            (inset -1px -1px 0 rgba($grid-debug-color, 1.0))
          );
        }
      
        .col {
          text-align: center;
          padding-top: $p-base-margin-top;
          padding-bottom: $p-base-margin-bottom;
    
          // Base
          @include box-shadow($col-base-shadows);
          
          &:last-child {
            // Right border and base
            @include box-shadow((
              $col-base-shadows,
              inset -1px 1px 0 rgba($grid-debug-color, 1.0)
            ));
          }

          // Nested rows inside a column don't need the extra line.
          .row:last-child {
            // Bottom border (no right border)
            @include box-shadow(
              (inset 0 -1px 0 rgba($grid-debug-color, 1.0))
            );
  
            .col:last-child {
              // Base
              @include box-shadow((
                $col-base-shadows
              ));
            }
          }
        }
      }
    }
  }
}
