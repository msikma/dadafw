// Dada Web Framework <https://github.com/msikma/dadafw>
// Copyright (C) 2013-2015, Michiel Sikma <michiel@sikma.org> and contributors
// MIT licensed

/**
 * Boxes
 *
 * Boxes generally consist of a header and inner section.
 * They're very flexible, have a large degree of customization
 * possibilities and many different built-in variations.
 */
// Mixin for the inner class when used inside of certain types of boxes.
@mixin box-inner($padding-top,
$padding-right,
$padding-bottom,
$padding-left,
$thickness,
$border-width: 1px) {
  $offset-top: $padding-top - $thickness;
  $offset-right: $padding-right - $thickness;
  $offset-bottom: $padding-bottom - $thickness;
  $offset-left: $padding-left - $thickness;
  margin: (-$offset-top) (-$offset-right) (-$offset-bottom) (-$offset-left);
  padding: ($offset-top - $border-width) ($offset-right - $border-width) ($offset-bottom - $border-width) ($offset-left - $border-width);
}

// Three semantic box styles exist: info, warning, error.
@mixin semantic-box($bg-color, $border-color) {
  background: $bg-color;
  border: none;
  border-left: $border-width-thick solid $border-color;
}
@mixin semantic-box-icon($content, $color) {
  padding-left: 4em;

  &:before {
    @include font-awesome-icon();
    @include shiny-icon();
    color: $color;
    content: $content;
    position: absolute;
    top: 50%;
    left: 0;
    font-size: 2em;
    margin-top: -0.5em;
    width: 2.2em;
    text-align: center;
  }
}

@if $component-boxes == true {
  .box {
    @include no-edge-margins();
    @include box-margin("m");
    position: relative;

    // Boxes may contain a header and inner section.
    .head {
      //todo
    }

    // The contents can optionally be wrapped in an .inner class,
    // which resets the display back to the regular style.
    .inner {
      background: white;
      @include border-radius(0);
      @include box-padding("m");
      outline: 1px solid rgba($color-black, 0.2);
    }

    &.bg {
      @include border-radius("m");
      @include box-padding("m");
      background-color: $color-gray-l2;
      border: 1px solid transparent;

      .inner {
        @include box-inner($box-padding-top-m, $box-padding-right-m, $box-padding-bottom-m, $box-padding-left-m, $box-padding-sub-m);
      }
      .head {
        @include box-inner($box-padding-top-m, $box-padding-right-m, $box-padding-bottom-m, $box-padding-left-m, $box-padding-sub-m);
        font-weight: bold;
      }
      .head + .inner {
        margin-top: $box-padding-top-m - 3px;
      }
    }

    // Bordered box.
    &.bordered {
      @include border-radius("m");
      @include box-padding("m");
      border: 1px solid rgba($color-black, 0.15);
      background-color: $color-gray-l1;

      .inner {
        @include box-inner($box-padding-top-m, $box-padding-right-m, $box-padding-bottom-m, $box-padding-left-m, $box-padding-sub-m);
      }

      &.s {
        @include border-radius("s");
        @include box-padding("s");
        .inner {
          @include box-inner($box-padding-top-s, $box-padding-right-s, $box-padding-bottom-s, $box-padding-left-s, $box-padding-sub-s);
        }
      }
      &.l {
        @include border-radius("l");
        @include box-padding("l");
        .inner {
          @include box-inner($box-padding-top-l, $box-padding-right-l, $box-padding-bottom-l, $box-padding-left-l, $box-padding-sub-l);
        }
      }
    }

    &.info {
      @include semantic-box($color-cyan-l2, $color-cyan-m2);

      &.icon {
        @include semantic-box-icon($fa-var-info-circle, $color-cyan-m2);
      }
    }
    &.warning {
      @include semantic-box($color-yellow-l2, $color-yellow-m2);

      &.icon {
        @include semantic-box-icon($fa-var-exclamation-triangle, $color-yellow-m2);
      }
    }
    &.error {
      @include semantic-box($color-red-l2, $color-red-m2);

      &.icon {
        @include semantic-box-icon($fa-var-times, $color-red-m2);
      }
    }

    // An example block can be used to display the result
    // of a piece of code. Used internally in the framework's examples.
    &.example {
      // The example box can contain a result, and a <pre> element with
      // the example code that produced the result.
      > .result,
      > pre {
        margin: 0;
        border: 1px solid $color-gray-l4;
        @include box-padding("m");
      }
      > .result {
        @include border-radius("m", ("tl", "tr"));
      }
      > pre {
        border-top: none;
        @include border-radius("m", ("bl", "br"));
      }

      // If only one single element is used (either only programming code,
      // or only the result), then remove the separator styling and
      // add border rounding on all corners.
      &.single {
        > .result,
        > pre {
          border: 1px solid $color-gray-l4;
          @include border-radius("m");
        }
      }

      // If a code example is very long, one might want to set the code section
      // to have a fixed height.
      &.fixed-height {
        > pre {
          height: 17em;
          overflow-y: scroll;
        }
      }

      // If a label is included (in any block element), display it at the top.
      // We can't use a content attribute trick for the content, as that
      // would make localization impossible.
      > .label {
        // Font size is smaller than usual, so we need to increase the
        // top and left offsets by its factor.
        $size-factor: ($font-small-size / $font-base-size);
        position: absolute;
        top: $box-padding-top-m / $size-factor;
        left: $box-padding-left-m / ($size-factor);
        font-size: percentage($size-factor);
        line-height: 1em / ($size-factor);
        color: $color-gray-m2;
        text-transform: uppercase;
        font-weight: 700;
        margin-top: 2px; // Compensate for the border
        margin-bottom: 0;

        // Remove the forced uppercase styling for nested <code>
        // tags, since they usually are case sensitive.
        > code {
          text-transform: none;
        }
      }

      &.with-label {
        > *:nth-child(2) {
          // Include the extra padding to account for a label
          // to whatever is the second element.
          padding-top: $box-padding-top-m * 2 + 18px;
        }
      }
    }
  }
}
