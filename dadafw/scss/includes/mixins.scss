// Dada Web Framework
// ---------------------------------------------------------------------
// Copyright (C) 2013-2014, Michiel Sikma <info@michielsikma.com>
// All Rights Reserved

/**
 * Internal Mixins
 */

// Used to contain floats without the need to use presentational HTML.
// For more info, see <http://nicolasgallagher.com/micro-clearfix-hack/>.
@mixin displayfix {
  &:before,
  &:after {
    line-height: 0;
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Change the font family to the standard interface set.
@mixin interface-font {
  font-family: $font-interface;
}

// A large drop shadow for elements that are designed to look like
// they're lying on top of the screen.
@mixin modal-shadow {
  @include box-shadow((
    $modal-shadow-offset-left $modal-shadow-offset-top $modal-shadow-blur rgba($color-black, $modal-shadow-opacity),
  ));
}

// Removes all default bullet styling from a list.
@mixin list-unstyled {
  padding-left: 0;
  margin: 0;
  
  > li {
    list-style: none;
  }
}

// This is the standard styling used for creating Font Awesome icons.
@mixin font-awesome-icon {
  position: absolute;
  display: inline-block;
  font-family: FontAwesome, $font-interface;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  @include font-smoothing("grayscale");
}
@mixin font-smoothing($value:"grayscale") {
  // Sets the font rendering method.
  @if $ddfw-compatibility-mode == true {
    @if $value == "grayscale" {
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    @else {
      -webkit-font-smoothing: subpixel-antialiased;
      -moz-osx-font-smoothing: auto;
    }
  }
}

// Adds fancy styling for icons.
// todo: rewrite
@mixin shiny-icon {
  text-shadow: 0 1px 1px rgba($color-white, 0.6);
}

// Mixin for border radiuses
//
// $amount can be a regular value, or 'xs', 's', 'm', or 'l'.
//
// $corners needs to be a list with any of 'tl', 'tr', 'bl', 'br',
// in any order. For example, ('tl', 'tr'), which would apply the
// border radius only to the top left and top right corners.

@mixin border-radius($amount:"m", $corners:("tl", "tr", "bl", "br")) {
	// If the $amount variable is a string, check if we have a variable
	// with a standardized radius size.
  $radius: 0;
  $radiuses: (
  	xs: $border-radius-xs,
  	s: $border-radius-s,
  	m: $border-radius-m,
  	l: $border-radius-l,
  );
  $amount-val: map-get($radiuses, $amount);
  
  // Either take our standard value or use whatever was passed to $amount.
  @if ($amount-val != null) {
    $radius: $amount-val;
  }
  @else {
    $radius: $amount;
  }
  
  // Reset the border radius first.
  border-radius: 0;
  
  // Loop through the $corners argument.
  $i: length($corners);
  $cmap: (
  	tl: border-top-left-radius,
  	tr: border-top-right-radius,
  	bl: border-bottom-left-radius,
  	br: border-bottom-right-radius,
  );
	@while $i > 0 {
		$corner: nth($corners, $i);
		$attr: map-get($cmap, $corner);
		#{$attr}: $radius;
		$i: $i - 1;
	}
}

// A very subtle bevel effect
// Note: currently unused.
@mixin box-bevel {
  border: 1px solid rgba($color-black, 0.15);
  @include box-shadow((
    inset 0 -1px 0 rgba($color-black, 0.06),
    inset 0 1px 1px rgba(255, 255, 255, 0.08)
  ));
}

// Removes margins on the first and last element.
@mixin no-edge-margins {
  &:first-child {
    margin-top: 0;
  }
  &:last-child {
    margin-bottom: 0;
  }
}


// Boxes
// ---------------------------------------------------------------------
// Mixins for buttons, input fields and anything similar.

// Generic box styles; e.g. for the pre tag.
// $plus can be set to a number to add or subtract a bit of padding.
@mixin box-padding($amount:"m", $plus:0) {
  $t: 0;
  $r: 0;
  $b: 0;
  $l: 0;
  @if ($amount == "s") {
    $t: $box-padding-top-s;
    $r: $box-padding-right-s;
    $b: $box-padding-bottom-s;
    $l: $box-padding-left-s;
  }
  @if ($amount == "m") {
    $t: $box-padding-top-m;
    $r: $box-padding-right-m;
    $b: $box-padding-bottom-m;
    $l: $box-padding-left-m;
  }
  @if ($amount == "l") {
    $t: $box-padding-top-l;
    $r: $box-padding-right-l;
    $b: $box-padding-bottom-l;
    $l: $box-padding-left-l;
  }
  // Add or remove extra padding based on the $plus variable.
  $t: $t + $plus;
  $r: $r + $plus;
  $b: $b + $plus;
  $l: $l + $plus;
  padding: $t $r $b $l;
}

// Box margin setter.
@mixin box-margin($amount:"m") {
  $t: 0;
  $r: 0;
  $b: 0;
  $l: 0;
  @if ($amount == "xs") {
    $t: $box-margin-top-xs;
    $r: $box-margin-right-xs;
    $b: $box-margin-bottom-xs;
    $l: $box-margin-left-xs;
  }
  @if ($amount == "s") {
    $t: $box-margin-top-s;
    $r: $box-margin-right-s;
    $b: $box-margin-bottom-s;
    $l: $box-margin-left-s;
  }
  @if ($amount == "m") {
    $t: $box-margin-top-m;
    $r: $box-margin-right-m;
    $b: $box-margin-bottom-m;
    $l: $box-margin-left-m;
  }
  @if ($amount == "l") {
    $t: $box-margin-top-l;
    $r: $box-margin-right-l;
    $b: $box-margin-bottom-l;
    $l: $box-margin-left-l;
  }
  margin: $t $r $b $l;
}

// Generic button padding.
@mixin button-padding($amount:"m") {
  $t: 0;
  $r: 0;
  $b: 0;
  $l: 0;
  @if ($amount == "xs") {
    $t: $button-padding-top-xs;
    $r: $button-padding-right-xs;
    $b: $button-padding-bottom-xs;
    $l: $button-padding-left-xs;
  }
  @if ($amount == "s") {
    $t: $button-padding-top-s;
    $r: $button-padding-right-s;
    $b: $button-padding-bottom-s;
    $l: $button-padding-left-s;
  }
  @if ($amount == "m") {
    $t: $button-padding-top-m;
    $r: $button-padding-right-m;
    $b: $button-padding-bottom-m;
    $l: $button-padding-left-m;
  }
  @if ($amount == "l") {
    $t: $button-padding-top-l;
    $r: $button-padding-right-l;
    $b: $button-padding-bottom-l;
    $l: $button-padding-left-l;
  }
  padding: $t $r $b $l;
}

// Variations:
@mixin box-generic-rounded($size:"m") {
  @include border-radius($size);
}
@mixin box-border {
  border: 1px solid $color-gray-l4;
}
@mixin box-transparent($size:"m") {
  @include box-padding($size);
  @include box-generic-rounded($size);
  @include box-border;
}
@mixin box-opaque($size:"m") {
  @include box-transparent($size);
  background-color: $color-gray-l1;
}

// Pill objects; e.g. the <button> element and single-line <input> elements.
@mixin pill($size:"m") {
  @include button-padding($size);
  vertical-align: middle;
  // Explicitly set the correct font size and line height.
  font-size: $font-base-size;
  line-height: 1;
  font-weight: 400;
  
  @if ($size == "xs") {
    font-size: percentage(11px / $font-base-size);
  }
}

// Quick CSS reset for various objects
@mixin general-reset($row-compatible:false) {
  @if $row-compatible {
    // Only remove the top and bottom margins (to avoid problems when
    // adding a .row class to the element).
    margin-top: 0;
    margin-bottom: 0;
  }
  @else {
    // By default, reset the margin too.
    margin: 0;
  }
  padding: 0;
  border: none;
}

// Function that generates the syntax highlighting CSS code for printers.
// This should be called with a list of printer syntax highlighting
// instructions. For an example, see $syn-print-prettify in defaults.scss.
// Important: this mixin doesn't include @media print, so you should
// do that yourself wherever you're calling the code.
@mixin syntax-print-styles($print-styles) {
  @each $name in map-keys($print-styles) {
    $styles: map-get($print-styles, $name);
    @each $style in $styles {
      @if $style == bold {
        .#{$name} {
          font-weight: 700;
        }
      }
      @if $style == italic {
        .#{$name} {
          font-style: italic;
        }
      }
      @if $style == underline {
        .#{$name} {
          text-decoration: underline;
        }
      }
    }
  }
}