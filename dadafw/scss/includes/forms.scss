// Dada Web Framework <https://github.com/msikma/dadafw>
// Copyright (C) 2013-2015, Michiel Sikma <michiel@sikma.org> and contributors
// MIT licensed

/**
 * Forms and Input Elements
 *
 * todo
 */

// Target anything with the ARIA role "form".
form {
  @include general-reset(true);
  
  // Related fields should be contained within a <fieldset> element.
  fieldset {
    @include general-reset;
    
    margin: 1em 0;
    
    @include no-edge-margins;
    
    // Normally, labels get the same amount of margin as the
    // <fieldset> element does. But not when it's the first label
    // in a set, to avoid a double margin.
    > *:first-child {
      > label.line {
        margin-top: 0;
      }
    }
  }
  
  // The first <label> element in a form should not have an extra top margin.
  // FIXME: what about in <p>?
  > label:first-child.line {
    margin-top: 0;
  }
  
  label {
    // Labels used for regular text input fields (single or multiline)
    // should have the .line class.
    &.line {
      font-weight: 700;
      display: block;
      margin-bottom: 0.286em;
      margin-top: 1em;
    }
    
    &.checkbox {
      // A checkbox label should be regular styled.
      font-weight: 400;
      display: inline;
      line-height: 1;
    }
  }
  // The .line input fields are for anything that's one line of regular text.
  // In HTML5, this is: text, password, datetime, datetime-local, date,
  // month, time, week, number, email, url, search, tel, and color.
  input.line,
  textarea.line,
  textarea.multiline {
    @include transition(box-shadow 0.2s);
    @include general-reset;
    @include pill("m");
    @include border-radius("m");
    @include box-shadow((
      $form-focus-shadow-off,
      inset 0 1px 1px rgba($color-black, 0.12)
    ));
    // Firefox seems to override the inherited box-sizing value when using
    // the type="search", so we'll set it again here.
    @include box-sizing(border-box);
    display: block;
    width: 100%;
    border: 1px solid $color-gray-m1;
    padding: $input-padding-top-m $input-padding-left-m $input-padding-bottom-m $input-padding-right-m;
    font-size: $font-base-size;
    // Set the height to be consistent with <button> elements.
    height: $font-base-lineheight + 1em;
    position: relative;
  }
  
  // For <input type="search"> elements, we need to add a
  // <span class="search-icon"> after the input field to show the hourglass.
  // (We can't abuse generated content for presentation on <input> fields.)
  .search-icon {
    position: relative;
    display: block;
    height: 1px;
    margin-bottom: -1px;
    
    &:before {
      // We'll animate the hourglass icon at the same speed as the input field.
      @include transition(color 0.2s);
      // Note: Font Awesome doesn't have a mixin that provides the standard
      // styling needed to display an icon, so we've simply copied their
      // styles from the _core.scss file to our own mixin.
      content: $fa-var-search;
      @include font-awesome-icon;
      font-size: $font-base-size;
      // Position it in the middle of the input element.
      top: (($font-base-lineheight + 1em) / 2) - ($font-base-lineheight + 1em);
      margin-top: -($font-base-size / 2);
      right: $input-padding-right-m;
      width: $font-base-size;
      height: $font-base-size;
      color: $color-gray-m4;
      z-index: 10;
    }
  }
  // When the input is selected, we need to colorize the hourglass too.
  input.line[type="search"]:focus + .search-icon:before,
  input.line.search:focus + .search-icon:before, {
    @include transition(color 0.1s);
    color: $color-bondi-m3;
  }
  
  // Open question: anything we can do to make type="number" more usable?
  
  // Specific styles for the <textarea> element
  textarea.line {
    line-height: $font-base-lineheight;
  }
  input.line:focus,
  textarea.line:focus,
  textarea.multiline:focus {
    @include transition(box-shadow 0.1s);
    @include box-shadow($form-focus-shadow-on);
    border-color: $color-bondi-m2;
    // Place the input field just above regular buttons (so that the
    // glowing border shows above the button).
    z-index: 8;
  }
  
  
  // In some cases, an <input> will be grouped together with something else
  // inside of a .input-group wrapper.
  // An <input> element can be grouped together with either a simple text
  // label (represented in a <span>), or a <button>.
  // The <span> or <button> can sit on either the left or right side, or both.
  
  .input-group {
    display: table;
    width: 100%;
    
    // The addon is either a <span class="input-addon label"> with text,
    // or it's a <button> nested inside of a <span class="input-addon">.
    .input-addon {
      line-height: 1;
      vertical-align: middle;
      white-space: nowrap;
      // Display as table-cell in order to evenly divide all space with the
      // input following it.
      display: table-cell;
      width: 1px;
      
      // In case this is a text label, the .label class must be added.
      // This same <span> contains the text.
      &.label {
        @include border-radius("m", ("tl", "bl"));
        border: 1px solid $color-gray-m1;
        background: $color-gray-l2;
        padding: $input-padding-top-m $input-padding-left-m $input-padding-bottom-m $input-padding-right-m;
        height: $font-base-lineheight + 1em;
        border-right: none;
      }
    }
    // A text label following an input.
    // Remove border and rounding on the left side.
    input.line + .input-addon.label {
      @include border-radius("m", ("tr", "br"));
      // We assume a text label to be on the left side by default.
      // Switch the border to the right side in this case.
      border-left: none;
      border-right: 1px solid $color-gray-m1;
    }
    
    // If an addon follows an input field, the input field
    // should not have rounding on the right side.
    // This is the default assumption.
    input.line {
      @include border-radius("m", ("tl", "bl"));
      
      // If it's the only item in a chain, it should have rounding
      // on all sides. Every other possibility is handled by other code.
      // This should not happen if the user does their job properly though.
      &:last-child {
        @include border-radius("m");
      }
    }
    
    // Remove the box shadow on the left and right in case it follows
    // or precedes an add-on.
    .input-addon + input.line {
      // Following an add-on.
      @include border-radius(0);
      float: left;
    
      // If there's no addon following the input field, it should have
      // rounded corners on the right side.
      &:last-child {
        @include border-radius("m", ("tr", "br"));
      }
    }
    
    // If a button is inside of an addon container, it should assume
    // the same height as an input field.
    // By default, we assume that the button is on the left side.
    
    .input-addon {
      button,
      .btn,
      *[role="button"] {
        @include border-radius("m", ("tl", "bl"));
        // Give the buttons the same height as the input items.
        height: $font-base-lineheight + 1em;
      
        // Hide the fact that two borders are adjecent to each other.
        margin-right: -1px;
        // Move it up in the display chain so that the button's border
        // prevails over the input field's border.
        position: relative;
        z-index: 5;
      }
    }
    
    // Modify the button in case it's on the right side.
    input.line + .input-addon {
      button,
      .btn,
      *[role="button"] {
        @include border-radius("m", ("tr", "br"));
        // Hide the border on the left.
        margin-left: -1px;
        margin-right: 0;
      }
    }
  }
  
  // If a button is either inside of an inline form field,
  // or inside of an input group, then the button's size increases slightly.
  // This causes the caret for a dropdown button to be slightly off-center.
  // Here we fix the caret's positioning in those cases.
  &.inline,
  .input-group .input-addon {
    button,
    .btn,
    *[role="button"] {
      &.has-dropdown {
        &:before {
          // fixme: find out why it needs to be ~0.8em.
          top: ($font-base-lineheight + 0.8em) / 2;
        }
      }
    }
  }
  
  // Disabled form fields have an ugly text shadow in IE9
  // that we can't remove.
  input[disabled] {
    // Nothing here.
  }
  // Take out the margin in case <p> is used to contain form elements.
  p {
    margin: 0;
  }
  
  // .desc is used to provide a explanation or help text for a form field.
  .desc {
    display: block;
    color: $color-gray-m3;
    margin: 0.5em 0 0.286em;
    line-height: 1;
  }
  
  // Wrapper for checkboxes and radio buttons:
  .checkbox, .radio {
    // Margin for multiple inline items.
    margin: 0 1em 0 0;
    &:last-child {
      margin-right: 0;
    }
    
    input[type=checkbox], input[type=radio] {
      margin: 0 0.1em 0 0;
      // Put it on the baseline.
      vertical-align: baseline;
    }
    input[type=checkbox] {
      // Move it up just a little.
      position: relative;
      top: -0.065em;
    }
  }
  
  // Inline forms use inline-block containers rather than block containers.
  &.inline {
    display: inline-block;
    
    fieldset, input, button {
      display: inline-block;
      margin: 0;
      width: auto;
    }
    // Whenever buttons appear on the same line as an input element,
    // they need to have the same height.
    button {
      // Give the buttons the same height as the input items.
      height: $font-base-lineheight + 1em;
    }
  }
}
